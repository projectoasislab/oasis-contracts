{
    "language": "Solidity",
    "sources": {
        "./contracts/Stakinga/MasterChefv2.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./IRewardLocker.sol\";\n\n// MasterChef is the master of PAW. He can make PAW and he is a fair guy.\n//\n// Note that it's ownable and the owner wields tremendous power. The ownership\n// will be transferred to a governance smart contract once PAW is sufficiently\n// distributed and the community can show to govern itself.\n//\n// Have fun reading it. Hopefully it's bug-free. God bless.\n// For any questions contact @macatkevin on Telegram\ncontract MasterChefv2 is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount;           // How many LP tokens the user has provided.\n        uint256 lastPawPerShare;  // Paw per share on last update\n        uint256 unclaimed;        // Unclaimed reward in Paw.\n        // pending reward = user.unclaimed + (user.amount * (pool.accPawPerShare - user.lastPawPerShare)\n        //\n        // Whenever a user deposits or withdraws Staking tokens to a pool. Here's what happens:\n        //   1. The pool's `accPawPerShare` (and `lastPawBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `lastPawPerShare` gets updated.\n        //   4. User's `amount` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken;           // Address of LP token contract.\n        uint256 allocPoint;       // How many allocation points assigned to this pool. PAW to distribute per block.\n        uint256 totalDeposited;   // The total deposited by users\n        uint256 lastRewardBlock;  // Last block number that PAW distribution occurs.\n        uint256 accPawPerShare;   // Accumulated PAW per share, times 1e18. See below.\n    }\n\n    // The PAW TOKEN!\n    IERC20 public immutable paw;\n    address public pendingPawOwner;\n    address public pawTransferOwner;\n    address public devAddress;\n\n    // Contract for locking reward\n    IRewardLocker public immutable rewardLocker;\n\n    // PAW tokens created per block.\n    uint256 public pawPerBlock = 8 ether;\n    uint256 public constant MAX_EMISSION_RATE = 1000 ether; // Safety check\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    uint256 public constant MAX_ALLOC_POINT = 100000; // Safety check\n    // The block number when PAW mining starts.\n    uint256 public immutable startBlock;\n\n    event Add(address indexed user, uint256 allocPoint, IERC20 indexed token, bool massUpdatePools);\n    event Set(address indexed user, uint256 pid, uint256 allocPoint);\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, bool harvest);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, bool harvest);\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n    event HarvestMultiple(address indexed user, uint256[] _pids, uint256 amount);\n    event HarvestAll(address indexed user, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event SetDevAddress(address indexed user, address indexed newAddress);\n    event UpdateEmissionRate(address indexed user, uint256 pawPerBlock);\n    event SetPawTransferOwner(address indexed user, address indexed pawTransferOwner);\n    event AcceptPawOwnership(address indexed user, address indexed newOwner);\n    event NewPendingPawOwner(address indexed user, address indexed newOwner);\n\n    constructor(\n        IERC20 _paw,\n        uint256 _startBlock,\n        IRewardLocker _rewardLocker,\n        address _devAddress,\n        address _pawTransferOwner\n    ) public {\n        require(_devAddress != address(0), \"!nonzero\");\n        paw = _paw;\n        startBlock = _startBlock;\n\n        rewardLocker = _rewardLocker;\n        devAddress = _devAddress;\n        pawTransferOwner = _pawTransferOwner;\n        \n        IERC20(_paw).safeApprove(address(_rewardLocker), uint256(0));\n        IERC20(_paw).safeIncreaseAllowance(\n            address(_rewardLocker),\n            uint256(-1)\n        );\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    mapping(IERC20 => bool) public poolExistence;\n    modifier nonDuplicated(IERC20 _lpToken) {\n        require(poolExistence[_lpToken] == false, \"nonDuplicated: duplicated\");\n        _;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _massUpdatePools) external onlyOwner nonDuplicated(_lpToken) {\n        require(_allocPoint <= MAX_ALLOC_POINT, \"!overmax\");\n        if (_massUpdatePools) {\n            massUpdatePools(); // This ensures that massUpdatePools will not exceed gas limit\n        }\n        _lpToken.balanceOf(address(this)); // Check to make sure it's a token\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolExistence[_lpToken] = true;\n        poolInfo.push(PoolInfo({\n            lpToken: _lpToken,\n            totalDeposited: 0,\n            allocPoint: _allocPoint,\n            lastRewardBlock: lastRewardBlock,\n            accPawPerShare: 0\n        }));\n        emit Add(msg.sender, _allocPoint, _lpToken, _massUpdatePools);\n    }\n\n    // Update the given pool's PAW allocation point. Can only be called by the owner.\n    function set(uint256 _pid, uint256 _allocPoint) external onlyOwner {\n        require(_allocPoint <= MAX_ALLOC_POINT, \"!overmax\");\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n        emit Set(msg.sender, _pid, _allocPoint);\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        return _to.sub(_from);\n    }\n\n    // View function to see pending PAW on frontend.\n    function pendingPaw(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accPawPerShare = pool.accPawPerShare;\n        if (block.number > pool.lastRewardBlock && pool.totalDeposited != 0 && totalAllocPoint != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 pawReward = multiplier.mul(pawPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accPawPerShare = accPawPerShare.add(pawReward.mul(1e18).div(pool.totalDeposited));\n        }\n        return user.amount.mul(accPawPerShare.sub(user.lastPawPerShare)).div(1e18).add(user.unclaimed);\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        if (pool.totalDeposited == 0 || pool.allocPoint == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 pawReward = multiplier.mul(pawPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n      //  paw.mint(devAddress, pawReward.div(50)); // 2%\n      //  paw.mint(address(this), pawReward);\n        pool.accPawPerShare = pool.accPawPerShare.add(pawReward.mul(1e18).div(pool.totalDeposited));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to MasterChef for PAW allocation.\n    function deposit(uint256 _pid, uint256 _amount, bool _shouldHarvest) external nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        _updateUserReward(_pid, _shouldHarvest);\n        if (_amount > 0) {\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\n            _amount = afterDeposit.sub(beforeDeposit);\n\n            user.amount = user.amount.add(_amount);\n            pool.totalDeposited = pool.totalDeposited.add(_amount);\n        }\n        emit Deposit(msg.sender, _pid, _amount, _shouldHarvest);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount, bool _shouldHarvest) external nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        _updateUserReward(_pid, _shouldHarvest);\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.totalDeposited = pool.totalDeposited.sub(_amount);\n            pool.lpToken.safeTransfer(msg.sender, _amount);\n        }\n        emit Withdraw(msg.sender, _pid, _amount, _shouldHarvest);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.lastPawPerShare = 0;\n        user.unclaimed = 0;\n        pool.totalDeposited = pool.totalDeposited.sub(amount);\n        pool.lpToken.safeTransfer(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n    \n    // Update the rewards of caller, and harvests if needed\n    function _updateUserReward(uint256 _pid, bool _shouldHarvest) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount == 0) {\n            user.lastPawPerShare = pool.accPawPerShare;\n        }\n        uint256 pending = user.amount.mul(pool.accPawPerShare.sub(user.lastPawPerShare)).div(1e18).add(user.unclaimed);\n        user.unclaimed = _shouldHarvest ? 0 : pending;\n        if (_shouldHarvest && pending > 0) {\n            _lockReward(msg.sender, pending);\n            emit Harvest(msg.sender, _pid, pending);\n        }\n        user.lastPawPerShare = pool.accPawPerShare;\n    }\n    \n    // Harvest one pool\n    function harvest(uint256 _pid) external nonReentrant {\n        _updateUserReward(_pid, true);\n    }\n    \n    // Harvest specific pools into one vest\n    function harvestMultiple(uint256[] calldata _pids) external nonReentrant {\n        uint256 pending = 0;\n        for (uint256 i = 0; i < _pids.length; i++) {\n            updatePool(_pids[i]);\n            PoolInfo storage pool = poolInfo[_pids[i]];\n            UserInfo storage user = userInfo[_pids[i]][msg.sender];\n            if (user.amount == 0) {\n                user.lastPawPerShare = pool.accPawPerShare;\n            }\n            pending = pending.add(user.amount.mul(pool.accPawPerShare.sub(user.lastPawPerShare)).div(1e18).add(user.unclaimed));\n            user.unclaimed = 0;\n            user.lastPawPerShare = pool.accPawPerShare;\n        }\n        if (pending > 0) {\n            _lockReward(msg.sender, pending);\n        }\n        emit HarvestMultiple(msg.sender, _pids, pending);\n    }\n    \n    // Harvest all into one vest. Will probably not be used\n    // Can fail if pool length is too big due to massUpdatePools()\n    function harvestAll() external nonReentrant {\n        massUpdatePools();\n        uint256 pending = 0;\n        for (uint256 i = 0; i < poolInfo.length; i++) {\n            PoolInfo storage pool = poolInfo[i];\n            UserInfo storage user = userInfo[i][msg.sender];\n            if (user.amount == 0) {\n                user.lastPawPerShare = pool.accPawPerShare;\n            }\n            pending = pending.add(user.amount.mul(pool.accPawPerShare.sub(user.lastPawPerShare)).div(1e18).add(user.unclaimed));\n            user.unclaimed = 0;\n            user.lastPawPerShare = pool.accPawPerShare;\n        }\n        if (pending > 0) {\n            _lockReward(msg.sender, pending);\n        }\n        emit HarvestAll(msg.sender, pending);\n    }\n\n    /**\n    * @dev Call locker contract to lock rewards\n    */\n    function _lockReward(address _account, uint256 _amount) internal {\n        uint256 pawBal = paw.balanceOf(address(this));\n        rewardLocker.lock(paw, _account, _amount > pawBal ? pawBal : _amount);\n    }\n\n    // Update dev address by the previous dev.\n    function setDevAddress(address _devAddress) external onlyOwner {\n        require(_devAddress != address(0), \"!nonzero\");\n        devAddress = _devAddress;\n        emit SetDevAddress(msg.sender, _devAddress);\n    }\n    \n    // Should never fail as long as massUpdatePools is called during add\n    function updateEmissionRate(uint256 _pawPerBlock) external onlyOwner {\n        require(_pawPerBlock <= MAX_EMISSION_RATE, \"!overmax\");\n        massUpdatePools();\n        pawPerBlock = _pawPerBlock;\n        emit UpdateEmissionRate(msg.sender, _pawPerBlock);\n    }\n\n    // Update paw transfer owner. Can only be called by existing pawTransferOwner\n    function setPawTransferOwner(address _pawTransferOwner) external {\n        require(msg.sender == pawTransferOwner);\n        pawTransferOwner = _pawTransferOwner;\n        emit SetPawTransferOwner(msg.sender, _pawTransferOwner);\n    }\n\n    /**\n     * @dev DUE TO THIS CODE THIS CONTRACT MUST BE BEHIND A TIMELOCK (Ideally 7)\n     * THIS FUNCTION EXISTS ONLY IF THERE IS AN ISSUE WITH THIS CONTRACT \n     * AND TOKEN MIGRATION MUST HAPPEN\n     */\n    function acceptPawOwnership() external {\n        require(msg.sender == pawTransferOwner);\n        require(pendingPawOwner != address(0));\n      //  paw.transferOwnership(pendingPawOwner);\n        pendingPawOwner = address(0);\n        emit AcceptPawOwnership(msg.sender, pendingPawOwner);\n    }\n    \n    function setPendingPawOwnership(address _pendingOwner) external {\n        require(msg.sender == pawTransferOwner);\n        pendingPawOwner = _pendingOwner;\n\n        emit NewPendingPawOwner(msg.sender, _pendingOwner);\n    }\n}\n"
        },
        "./contracts/Stakinga/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"
        },
        "./contracts/Stakinga/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
        },
        "./contracts/Stakinga/SafeMath.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"
        },
        "./contracts/Stakinga/SafeERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
        },
        "./contracts/Stakinga/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
        },
        "./contracts/Stakinga/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
        },
        "./contracts/Stakinga/ReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"
        },
        "./contracts/Stakinga/IRewardLocker.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./IERC20.sol\";\n\ninterface IRewardLocker {\n  struct VestingSchedule {\n    uint64 startBlock;\n    uint64 endBlock;\n    uint128 quantity;\n    uint128 vestedQuantity;\n  }\n\n  event VestingEntryCreated(\n    IERC20 indexed token,\n    address indexed beneficiary,\n    uint256 startBlock,\n    uint256 endBlock,\n    uint256 quantity,\n    uint256 index\n  );\n\n  event VestingEntryQueued(\n    uint256 indexed index,\n    IERC20 indexed token,\n    address indexed beneficiary,\n    uint256 quantity\n  );\n\n  event Vested(\n    IERC20 indexed token,\n    address indexed beneficiary,\n    uint256 vestedQuantity,\n    uint256 index\n  );\n\n  /**\n   * @dev queue a vesting schedule starting from now\n   */\n  function lock(\n    IERC20 token,\n    address account,\n    uint256 amount\n  ) external payable;\n\n  /**\n   * @dev queue a vesting schedule\n   */\n  function lockWithStartBlock(\n    IERC20 token,\n    address account,\n    uint256 quantity,\n    uint256 startBlock\n  ) external payable;\n\n  /**\n   * @dev vest all completed schedules for multiple tokens\n   */\n  function vestCompletedSchedulesForMultipleTokens(IERC20[] calldata tokens)\n    external\n    returns (uint256[] memory vestedAmounts);\n\n  /**\n   * @dev claim multiple tokens for specific vesting schedule,\n   *      if schedule has not ended yet, claiming amounts are linear with vesting blocks\n   */\n  function vestScheduleForMultipleTokensAtIndices(\n    IERC20[] calldata tokens,\n    uint256[][] calldata indices\n  )\n    external\n    returns (uint256[] memory vestedAmounts);\n\n  /**\n   * @dev for all completed schedule, claim token\n   */\n  function vestCompletedSchedules(IERC20 token) external returns (uint256);\n\n  /**\n   * @dev claim token for specific vesting schedule,\n   * @dev if schedule has not ended yet, claiming amount is linear with vesting blocks\n   */\n  function vestScheduleAtIndices(IERC20 token, uint256[] calldata indexes)\n    external\n    returns (uint256);\n\n  /**\n   * @dev claim token for specific vesting schedule from startIndex to endIndex\n   */\n  function vestSchedulesInRange(\n    IERC20 token,\n    uint256 startIndex,\n    uint256 endIndex\n  ) external returns (uint256);\n\n  /**\n   * @dev length of vesting schedules array\n   */\n  function numVestingSchedules(address account, IERC20 token) external view returns (uint256);\n\n  /**\n   * @dev get detailed of each vesting schedule\n   */\n  function getVestingScheduleAtIndex(\n    address account,\n    IERC20 token,\n    uint256 index\n  ) external view returns (VestingSchedule memory);\n\n  /**\n   * @dev get vesting shedules array\n   */\n  function getVestingSchedules(address account, IERC20 token)\n    external\n    view\n    returns (VestingSchedule[] memory schedules);\n}"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}